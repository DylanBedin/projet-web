{
  "swagger": "2.0",
  "info": {
    "description": "Notre API",
    "version": "1.0.0",
    "title": "Swagger Web Project",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "localhost:4200",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "return list of Users",
        "description": "returns a map of Users",
        "operationId": "getUsers",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Add a new User",
        "description": "",
        "operationId": "addUser",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object that needs to be added to the collection",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Find user by ID",
        "description": "Returns a single user",
        "operationId": "getuserById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "user not found"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update an existing user",
        "description": "",
        "operationId": "updateuser",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "user object that needs to be added to the collection",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "user not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Deletes a user",
        "description": "",
        "operationId": "deleteuser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user id to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "user not found"
          }
        }
      }
    },
    "/albums": {
      "get": {
        "tags": [
          "Albums"
        ],
        "summary": "return list of albums",
        "description": "returns a map of albums",
        "operationId": "getAlbums",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Albums"
        ],
        "summary": "Add a new album",
        "description": "",
        "operationId": "addAlbum",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Album object that needs to be added to the collection",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Album"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }

    },
    "/albums/{albumId}": {
      "get": {
        "tags": [
          "Albums"
        ],
        "summary": "Find Album by ID",
        "description": "Returns a single Album",
        "operationId": "getAlbumById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "albumId",
            "in": "path",
            "description": "ID of Album to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Album"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Album not found"
          }
        }
      },
      "put": {
        "tags": [
          "Albums"
        ],
        "summary": "Update an existing Album",
        "description": "",
        "operationId": "updateAlbum",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "albumId",
            "in": "path",
            "description": "ID of Album to modif",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Album object that needs to be added to the collection",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Album"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Album not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Albums"
        ],
        "summary": "Deletes a Album",
        "description": "",
        "operationId": "deleteAlbum",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "albumId",
            "in": "path",
            "description": "Album id to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Album not found"
          }
        }
      }
    },
    "/games": {
      "get": {
        "tags": [
          "Games"
        ],
        "summary": "return list of Games",
        "description": "returns a map of Games",
        "operationId": "getGames",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Games"
        ],
        "summary": "Add a new Game",
        "description": "",
        "operationId": "addGame",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Game object that needs to be added to the collection",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Game"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/games/{GameId}": {
      "get": {
        "tags": [
          "Games"
        ],
        "summary": "Find Game by ID",
        "description": "Returns a single Game",
        "operationId": "getGameById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "GameId",
            "in": "path",
            "description": "ID of Game to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Game"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Game not found"
          }
        }
      },
      "put": {
        "tags": [
          "Games"
        ],
        "summary": "Update an existing Game",
        "description": "",
        "operationId": "updateGame",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "GameId",
            "in": "path",
            "description": "ID of Game to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Game object that needs to be added to the collection",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Game"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Game not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Games"
        ],
        "summary": "Deletes a Game",
        "description": "",
        "operationId": "deleteGame",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "GameId",
            "in": "path",
            "description": "Game id to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Game not found"
          }
        }
      }
    },
    "/movies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "return list of Movies",
        "description": "returns a map of Movies",
        "operationId": "getMovies",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Add a new Movie",
        "description": "",
        "operationId": "addMovie",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Movie object that needs to be added to the collection",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Movies"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/movies/{MovieId}": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Find Movie by ID",
        "description": "Returns a single Movie",
        "operationId": "getMovieById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "MovieId",
            "in": "path",
            "description": "ID of Movie to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Movies"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Movie not found"
          }
        }
      },
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Update an existing Movie",
        "description": "",
        "operationId": "updateMovie",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "MovieId",
            "in": "path",
            "description": "ID of Movie to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Movie object that needs to be added to the collection",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Movies"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Movie not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a Movie",
        "description": "",
        "operationId": "deleteMovie",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "MovieId",
            "in": "path",
            "description": "Movie id to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Movie not found"
          }
        }
      }
    },
    "/series": {
      "get": {
        "tags": [
          "Series"
        ],
        "summary": "return list of Series",
        "description": "returns a map of Series",
        "operationId": "getSeries",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Series"
        ],
        "summary": "Add a new Serie",
        "description": "",
        "operationId": "addSerie",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Serie object that needs to be added to the collection",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Series"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/series/{SerieId}": {
      "get": {
        "tags": [
          "Series"
        ],
        "summary": "Find Serie by ID",
        "description": "Returns a single Serie",
        "operationId": "getSerieById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "SerieId",
            "in": "path",
            "description": "ID of Serie to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Series"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Serie not found"
          }
        }
      },
      "put": {
        "tags": [
          "Series"
        ],
        "summary": "Update an existing Serie",
        "description": "",
        "operationId": "updateSerie",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "SerieId",
            "in": "path",
            "description": "ID of Serie to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Serie object that needs to be added to the collection",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Series"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Serie not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Series"
        ],
        "summary": "Deletes a Serie",
        "description": "",
        "operationId": "deleteSerie",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "SerieId",
            "in": "path",
            "description": "Serie id to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Serie not found"
          }
        }
      }
    },
    "/books": {
      "get": {
        "tags": [
          "Books"
        ],
        "summary": "return list of Books",
        "description": "returns a map of Books",
        "operationId": "getBooks",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Books"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Books"
        ],
        "summary": "Add a new Book",
        "description": "",
        "operationId": "addBook",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Book object that needs to be added to the collection",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Books"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/books/{BookId}": {
      "get": {
        "tags": [
          "Books"
        ],
        "summary": "Find Book by ID",
        "description": "Returns a single Book",
        "operationId": "getBookById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "BookId",
            "in": "path",
            "description": "ID of Book to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Books"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Book not found"
          }
        }
      },
      "put": {
        "tags": [
          "Books"
        ],
        "summary": "Update an existing Book",
        "description": "",
        "operationId": "updateBook",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "BookId",
            "in": "path",
            "description": "ID of Book to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Book object that needs to be added to the collection",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Books"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Book not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Books"
        ],
        "summary": "Deletes a Book",
        "description": "",
        "operationId": "deleteBook",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "BookId",
            "in": "path",
            "description": "Book id to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Book not found"
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string",
          "format": "password"
        },
        "albumsCollection": {
          "type": "array",
          "xml": {
            "name": "albumsCollection"
          },
          "items": {
            "type": "string"
          }
        },
        "booksCollection": {
          "type": "array",
          "xml": {
            "name": "booksCollection"
          },
          "items": {
            "type": "string"
          }
        },
        "gamesCollection": {
          "type": "array",
          "xml": {
            "name": "gamesCollection"
          },
          "items": {
            "type": "string"
          }
        },
        "moviesCollection": {
          "type": "array",
          "xml": {
            "name": "moviesCollection"
          },
          "items": {
            "type": "string"
          }
        },
        "seriesCollection": {
          "type": "array",
          "xml": {
            "name": "seriesCollection"
          },
          "items": {
            "type": "string"
          }
        },
        "albumsEnvies": {
          "type": "array",
          "xml": {
            "name": "albumsEnvies"
          },
          "items": {
            "type": "string"
          }
        },
        "booksEnvies": {
          "type": "array",
          "xml": {
            "name": "booksEnvies"
          },
          "items": {
            "type": "string"
          }
        },
        "gamesEnvies": {
          "type": "array",
          "xml": {
            "name": "gamesEnvies"
          },
          "items": {
            "type": "string"
          }
        },
        "moviesEnvies": {
          "type": "array",
          "xml": {
            "name": "moviesEnvies"
          },
          "items": {
            "type": "string"
          }
        },
        "seriesEnvies": {
          "type": "array",
          "xml": {
            "name": "seriesEnvies"
          },
          "items": {
            "type": "string"
          }
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Album": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "author": {
          "type": "string"
        },
        "published_year": {
          "type": "integer"
        },
        "updated_date": {
          "type": "string",
          "format": "date"
        },
        "avis": {
            "type": "array",
            "xml": {
              "name": "avis"
            },
            "items": {
              "type": "string"
            }
          },
          "note": {
            "type": "integer"
          },
          "nbVotants": {
            "type": "integer"
          },
          "hasNoted": {
            "type": "array",
            "xml": {
              "name": "hasNoted"
            },
            "items": {
              "type": "string"
            }
          }
      },
      "xml": {
        "name": "Album"
      }
    },
    "Game": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "published_year": {
          "type": "integer"
        },
        "developer": {
          "type": "string"
        },
        "publisher": {
          "type": "string"
        },
        "updated_date": {
          "type": "string",
          "format": "date"
        },
        "note": {
          "type": "integer"
        },
        "nbVotants": {
          "type": "integer"
        },
        "hasNoted": {
          "type": "array",
          "xml": {
            "name": "hasNoted"
          },
          "items": {
            "type": "string"
          }
        }
      },
      "xml": {
        "name": "Album"
      }
    },
    "Movies": {
      "type": "object",
      "properties": {
        "director": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "published_year": {
          "type": "integer"
        },
        "actors": {
          "type": "array",
          "xml": {
            "name": "actors"
          },
          "items": {
            "type": "string"
          }
        },
        "updated_date": {
          "type": "string",
          "format": "date"
        },
        "note": {
          "type": "integer"
        },
        "nbVotants": {
          "type": "integer"
        },
        "hasNoted": {
          "type": "array",
          "xml": {
            "name": "hasNoted"
          },
          "items": {
            "type": "string"
          }
        }
      },
      "xml": {
        "name": "Album"
      }
    },
    "Series": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "published_year": {
          "type": "integer"
        },
        "actors": {
          "type": "array",
          "xml": {
            "name": "actors"
          },
          "items": {
            "type": "string"
          }
        },
        "updated_date": {
          "type": "string",
          "format": "date"
        },
        "note": {
          "type": "integer"
        },
        "nbVotants": {
          "type": "integer"
        },
        "hasNoted": {
          "type": "array",
          "xml": {
            "name": "hasNoted"
          },
          "items": {
            "type": "string"
          }
        }
      },
      "xml": {
        "name": "Album"
      }
    },
    "Books": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "author": {
            "type": "string"
          },
          "published_year": {
            "type": "integer"
          },
          "updated_date": {
            "type": "string",
            "format": "date"
        },
        "note": {
          "type": "integer"
        },
        "nbVotants": {
          "type": "integer"
        },
        "hasNoted": {
          "type": "array",
          "xml": {
            "name": "hasNoted"
          },
          "items": {
            "type": "string"
          }
        }
      },
      "xml": {
        "name": "Album"
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}
